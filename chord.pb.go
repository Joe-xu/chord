// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

/*
Package chord is a generated protocol buffer package.

It is generated from these files:
	chord.proto

It has these top-level messages:
	NodeInfo
	UpdateRequest
*/
package chord

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeInfo struct {
	ID       []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Addr     string `protobuf:"bytes,2,opt,name=Addr" json:"Addr,omitempty"`
	HttpPort string `protobuf:"bytes,3,opt,name=HttpPort" json:"HttpPort,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeInfo) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *NodeInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NodeInfo) GetHttpPort() string {
	if m != nil {
		return m.HttpPort
	}
	return ""
}

type UpdateRequest struct {
	Updater *NodeInfo `protobuf:"bytes,1,opt,name=Updater" json:"Updater,omitempty"`
	I       int32     `protobuf:"varint,2,opt,name=I" json:"I,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateRequest) GetUpdater() *NodeInfo {
	if m != nil {
		return m.Updater
	}
	return nil
}

func (m *UpdateRequest) GetI() int32 {
	if m != nil {
		return m.I
	}
	return 0
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "chord.NodeInfo")
	proto.RegisterType((*UpdateRequest)(nil), "chord.UpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Metadata(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	// get and set node's predecessor
	Predecessor(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	SetPredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// get and set node's successor
	Successor(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	SetSuccessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// rpc OnJoin(NodeInfo) returns (google.protobuf.Empty) {}
	OnNotify(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateFingerTable(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// NodeInfo.ID is the only available parma in the following func
	FindSuccessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
	FindPredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
	ClosestPrecedingFinger(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Metadata(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/Metadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Predecessor(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/Predecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetPredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chord.Node/SetPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Successor(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/Successor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetSuccessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chord.Node/SetSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) OnNotify(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chord.Node/OnNotify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateFingerTable(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chord.Node/UpdateFingerTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FindSuccessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/FindSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FindPredecessor(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/FindPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ClosestPrecedingFinger(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/chord.Node/ClosestPrecedingFinger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Metadata(context.Context, *google_protobuf.Empty) (*NodeInfo, error)
	// get and set node's predecessor
	Predecessor(context.Context, *google_protobuf.Empty) (*NodeInfo, error)
	SetPredecessor(context.Context, *NodeInfo) (*google_protobuf.Empty, error)
	// get and set node's successor
	Successor(context.Context, *google_protobuf.Empty) (*NodeInfo, error)
	SetSuccessor(context.Context, *NodeInfo) (*google_protobuf.Empty, error)
	// rpc OnJoin(NodeInfo) returns (google.protobuf.Empty) {}
	OnNotify(context.Context, *NodeInfo) (*google_protobuf.Empty, error)
	UpdateFingerTable(context.Context, *UpdateRequest) (*google_protobuf.Empty, error)
	// NodeInfo.ID is the only available parma in the following func
	FindSuccessor(context.Context, *NodeInfo) (*NodeInfo, error)
	FindPredecessor(context.Context, *NodeInfo) (*NodeInfo, error)
	ClosestPrecedingFinger(context.Context, *NodeInfo) (*NodeInfo, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Metadata(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Predecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Predecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/Predecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Predecessor(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/SetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetPredecessor(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Successor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Successor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/Successor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Successor(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/SetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SetSuccessor(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_OnNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).OnNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/OnNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).OnNotify(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateFingerTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateFingerTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/UpdateFingerTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateFingerTable(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FindSuccessor(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/FindPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FindPredecessor(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Node/ClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ClosestPrecedingFinger(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metadata",
			Handler:    _Node_Metadata_Handler,
		},
		{
			MethodName: "Predecessor",
			Handler:    _Node_Predecessor_Handler,
		},
		{
			MethodName: "SetPredecessor",
			Handler:    _Node_SetPredecessor_Handler,
		},
		{
			MethodName: "Successor",
			Handler:    _Node_Successor_Handler,
		},
		{
			MethodName: "SetSuccessor",
			Handler:    _Node_SetSuccessor_Handler,
		},
		{
			MethodName: "OnNotify",
			Handler:    _Node_OnNotify_Handler,
		},
		{
			MethodName: "UpdateFingerTable",
			Handler:    _Node_UpdateFingerTable_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Node_FindSuccessor_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _Node_FindPredecessor_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _Node_ClosestPrecedingFinger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}

func init() { proto.RegisterFile("chord.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcb, 0x4e, 0xf2, 0x40,
	0x14, 0xc7, 0x29, 0x1f, 0x7c, 0x96, 0xc3, 0x2d, 0x4e, 0x0c, 0x21, 0x75, 0x43, 0xba, 0xc2, 0x4d,
	0x49, 0x20, 0x18, 0x8d, 0x6e, 0x0c, 0x48, 0xa8, 0x89, 0x48, 0x8a, 0x3e, 0x40, 0xe9, 0x1c, 0x6a,
	0x13, 0xec, 0xd4, 0xe9, 0x61, 0xc1, 0x43, 0xfa, 0x4e, 0xa6, 0x53, 0xf1, 0x42, 0xb0, 0xb1, 0xbb,
	0xce, 0xe9, 0xf9, 0xfd, 0x2f, 0x33, 0x50, 0xf5, 0x9e, 0x85, 0xe4, 0x56, 0x24, 0x05, 0x09, 0x56,
	0x56, 0x07, 0xe3, 0xd4, 0x17, 0xc2, 0x5f, 0x63, 0x4f, 0x0d, 0x97, 0x9b, 0x55, 0x0f, 0x5f, 0x22,
	0xda, 0xa6, 0x3b, 0xe6, 0x1d, 0xe8, 0x33, 0xc1, 0xd1, 0x0e, 0x57, 0x82, 0x35, 0xa0, 0x68, 0x8f,
	0xdb, 0x5a, 0x47, 0xeb, 0xd6, 0x9c, 0xa2, 0x3d, 0x66, 0x0c, 0x4a, 0x37, 0x9c, 0xcb, 0x76, 0xb1,
	0xa3, 0x75, 0x2b, 0x8e, 0xfa, 0x66, 0x06, 0xe8, 0x53, 0xa2, 0x68, 0x2e, 0x24, 0xb5, 0xff, 0xa9,
	0xf9, 0xe7, 0xd9, 0x9c, 0x42, 0xfd, 0x29, 0xe2, 0x2e, 0xa1, 0x83, 0xaf, 0x1b, 0x8c, 0x89, 0x9d,
	0xc1, 0x51, 0x3a, 0x90, 0x4a, 0xb5, 0xda, 0x6f, 0x5a, 0x69, 0xbe, 0x9d, 0xa5, 0xb3, 0xfb, 0xcf,
	0x6a, 0xa0, 0xd9, 0xca, 0xa8, 0xec, 0x68, 0x76, 0xff, 0xad, 0x04, 0xa5, 0x64, 0x87, 0x0d, 0x41,
	0xbf, 0x47, 0x72, 0xb9, 0x4b, 0x2e, 0x6b, 0x59, 0x69, 0x11, 0x6b, 0x57, 0xc4, 0xba, 0x4d, 0x8a,
	0x18, 0xfb, 0xa2, 0x66, 0x81, 0x5d, 0x40, 0x75, 0x2e, 0x91, 0xa3, 0x87, 0x71, 0x2c, 0x64, 0x1e,
	0xf2, 0x0a, 0x1a, 0x0b, 0xa4, 0xef, 0xf0, 0xfe, 0x92, 0xf1, 0x8b, 0x9a, 0x59, 0x60, 0xe7, 0x50,
	0x59, 0x6c, 0xbc, 0xfc, 0xa6, 0x97, 0x50, 0x5b, 0x20, 0x7d, 0xa1, 0x39, 0x2c, 0x87, 0xa0, 0x3f,
	0x84, 0x33, 0x41, 0xc1, 0x6a, 0x9b, 0x07, 0x1b, 0xc1, 0x71, 0x7a, 0xf3, 0x93, 0x20, 0xf4, 0x51,
	0x3e, 0xba, 0xcb, 0x35, 0xb2, 0x93, 0x0f, 0xfe, 0xc7, 0x23, 0x66, 0x88, 0x0c, 0xa0, 0x3e, 0x09,
	0x42, 0x9e, 0x91, 0xfb, 0x40, 0xd7, 0x21, 0x34, 0x13, 0x28, 0xf3, 0x86, 0x0f, 0x60, 0xd7, 0xd0,
	0x1a, 0xad, 0x45, 0x8c, 0x71, 0xf2, 0x36, 0x1e, 0xf2, 0x20, 0xf4, 0xd3, 0xe8, 0x7f, 0xa1, 0x97,
	0xff, 0x55, 0xf6, 0xc1, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x39, 0xe6, 0x0a, 0x1f, 0x03,
	0x00, 0x00,
}
